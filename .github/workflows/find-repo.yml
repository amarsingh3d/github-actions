name: Find Repos with Dockerfile

on:
  workflow_dispatch:  # Allows you to trigger it manually from the GitHub UI
  
env:
  GIT_TOKEN: "{{ secrets.GIT_TOKEN }}"
  GIT_USER: "{{ secrets.GIT_USER }}"
jobs:
  check-repos:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # Checks out the repository to the runner

      - name: Install jq
        run: sudo apt-get install jq -y  # Install jq for JSON parsing

      - name: Get repositories and check for Dockerfile        
        run: |
          # Replace with your GitHub username
          USERNAME="${GIT_USER}"
          OUTPUT_FILE="repos_with_dockerfile.txt"

          # Initialize the output file (clear it if it already exists)
          > $OUTPUT_FILE

          # Fetch the list of repositories using GitHub CLI
          repos=$(gh repo list $USERNAME --json name -L 1000 | jq -r '.[].name')

          # Loop through each repository and check for Dockerfile
          for repo in $repos; do
              echo "Checking $repo..."

              # Use GitHub API to list files in the repository's root directory
              contents=$(curl -s -H "Authorization: token $GIT_TOKEN" \
                  "https://api.github.com/repos/$USERNAME/$repo/contents/")

              # Check if Dockerfile exists in the repository
              if echo "$contents" | grep -q '"name": "Dockerfile"'; then
                  echo "Found Dockerfile in $repo"
                  echo $repo >> $OUTPUT_FILE
              fi
          done

          echo "Repositories with Dockerfile have been saved to $OUTPUT_FILE"
          
      - name: Upload artifact - Repositories with Dockerfile
        uses: actions/upload-artifact@v3
        with:
          name: repos-with-dockerfile  # Name of the artifact (you can name it anything)
          path: repos_with_dockerfile.txt  # Path to the file you want to upload

      - name: List uploaded artifacts (for debugging)
        run: |
          echo "Listing all artifacts in the current job:"
          ls -l
          echo "Artifact should be available for download in the job artifacts section."
          
  download-artifact:
    runs-on: ubuntu-latest
    needs: check-repos  # This job will run after 'check-repos' finishes

    steps:
      - name: Download artifact - Repositories with Dockerfile
        uses: actions/download-artifact@v3
        with:
          name: repos-with-dockerfile  # The name of the artifact to download

      - name: Display the downloaded file
        run: |
          echo "Contents of the downloaded file:"
          cat repos_with_dockerfile.txt  # Display the contents of the downloaded artifact
